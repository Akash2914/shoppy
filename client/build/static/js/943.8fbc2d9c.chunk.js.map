{"version":3,"file":"static/js/943.8fbc2d9c.chunk.js","mappings":"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","sources":["api/contactus.js","pages/ContactUs.js"],"sourcesContent":["import axios from 'axios'\n\nexport const createContact = async (payload) => {\n  return await axios.post(`${process.env.REACT_APP_API}/postContact`, payload)\n}\n\nexport const deleteContactForm = async (id, authtoken) => {\n  return await axios.delete(\n    `${process.env.REACT_APP_API}/removeContact/${id}`,\n    {\n      headers: {\n        authtoken,\n      },\n    }\n  )\n}\n\nexport const getContactForms = async (authtoken) => {\n  return await axios.get(`${process.env.REACT_APP_API}/getContacts`, {\n    headers: {\n      authtoken,\n    },\n  })\n}\n","import React, { useState } from 'react'\nimport { toast } from 'react-toastify'\nimport { FormContainer } from '../components'\nimport { Form, Button, Spinner } from 'react-bootstrap'\nimport { createContact } from '../api/contactus'\nimport { useNavigate } from 'react-router-dom'\n\nconst ContactUs = () => {\n  const [buttonloading, setButtonLoading] = useState(false)\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [phone, setPhone] = useState('')\n  const [content, setContent] = useState('')\n\n  const navigate = useNavigate()\n\n  const phoneRegex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    let payload = {\n      name,\n      email,\n      phone,\n      content,\n    }\n    if (!name || !email || !phone || !content) {\n      return toast.error('All are required Fields')\n    }\n\n    if (!phoneRegex.test(phone)) {\n      return toast.error('Enter a Valid Phone Number wihtout country code')\n    }\n\n    setButtonLoading(true)\n    createContact(payload)\n      .then((res) => {\n        toast.success(\n          'Your request has been received, we will contact you shortly'\n        )\n        setButtonLoading(false)\n\n        setName('')\n        setEmail('')\n        setPhone('')\n        setContent('')\n        navigate('/')\n      })\n      .catch((err) => {\n        toast.error(err)\n        setButtonLoading(false)\n      })\n  }\n  return (\n    <>\n      <FormContainer>\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId='name'>\n            <Form.Label>\n              <strong style={{ color: 'black' }}>Name</strong>\n            </Form.Label>\n            <Form.Control\n              type='text'\n              autoFocus={true}\n              required={true}\n              placeholder='name'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <br />\n          <Form.Group controlId='email'>\n            <Form.Label>\n              <strong style={{ color: 'black' }}>Email</strong>\n            </Form.Label>\n            <Form.Control\n              type='text'\n              autoFocus={true}\n              required={true}\n              placeholder='email'\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <br />\n          <Form.Group controlId='phone'>\n            <Form.Label>\n              <strong style={{ color: 'black' }}>Phone</strong>\n            </Form.Label>\n            <Form.Control\n              type='Number'\n              autoFocus={true}\n              required={true}\n              placeholder='Phone'\n              value={phone}\n              onChange={(e) => setPhone(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <br />\n          <Form.Group controlId='content'>\n            <Form.Label>\n              <strong style={{ color: 'black' }}>Content</strong>\n            </Form.Label>\n            <Form.Control\n              as='textarea'\n              required={true}\n              placeholder='Type Your Query'\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              rows={3}\n            />\n          </Form.Group>\n\n          {buttonloading ? (\n            <Button\n              variant='primary'\n              className='btn-sm btn-danger mt-3'\n              disabled\n            >\n              <Spinner\n                as='span'\n                animation='grow'\n                size='sm'\n                role='status'\n                aria-hidden='true'\n              />\n              {'  '}\n              Loading...\n            </Button>\n          ) : (\n            <Button\n              type='submit'\n              disabled={buttonloading || !name || !content || !email}\n              className='btn-raised mt-3'\n              variant='primary'\n            >\n              Create\n            </Button>\n          )}\n        </Form>\n      </FormContainer>\n    </>\n  )\n}\n\nexport default ContactUs\n"],"names":["createContact","payload","axios","process","deleteContactForm","id","authtoken","headers","getContactForms","useState","buttonloading","setButtonLoading","name","setName","email","setEmail","phone","setPhone","content","setContent","navigate","useNavigate","phoneRegex","onSubmit","e","preventDefault","test","then","res","toast","catch","err","controlId","style","color","type","autoFocus","required","placeholder","value","onChange","target","as","rows","variant","className","disabled","animation","size","role"],"sourceRoot":""}